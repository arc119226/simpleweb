{\rtf1\ansi\ansicpg950\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset136 STHeitiTC-Light;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 1
\f1 \'a1\'42MPG DEMO 
\f0 Activity\
\
import java.util.HashMap;\
\
import org.apache.http.util.EncodingUtils;\
\
import android.app.Activity;\
import android.os.Bundle;\
import android.webkit.WebSettings;\
import android.webkit.WebView;\
import android.webkit.WebViewClient;\
\
public class MpgActivity extends Activity \{\
\
	private static final String MPG_URL = "https://capi.pay2go.com/MPG/mpg_gateway";\
	private Bundle mBdl;\
	private WebView webView;\
\
	@Override\
	protected void onCreate(Bundle savedInstanceState) \{\
		// TODO Auto-generated method stub\
		super.onCreate(savedInstanceState);\
		setContentView(R.layout.activity_mpg);\
		findViews();\
\
		mBdl = getIntent().getExtras();\
\
		// instantiate the webview\
		WebSettings webSettings = webView.getSettings();\
		webSettings.setJavaScriptEnabled(true);\
\
		HashMap<String, Object> data = new HashMap<String, Object>();\
		data.put("HashKey", mBdl.getString("HashKey"));\
		data.put("HashIV", mBdl.getString("HashIV"));\
		data.put("MerchantID", mBdl.getString("MerchantID"));\
		data.put("ItemDesc", mBdl.getString("Product"));\
		data.put("Amt", mBdl.getString("Amount"));\
		data.put("MerchantOrderNo", System.currentTimeMillis());\
		data.put("TimeStamp", System.currentTimeMillis() / 1000);\
		data.put("Version", "1.1");\
		data.put("RespondType", "JSON");\
		data.put("ExpireDate", "");\
		data.put("ReturnURL", "");\
		data.put("NotifyURL", "");\
		data.put("CustomerURL", "");\
		data.put("ClientBackURL", "");\
		data.put("Email", "");\
		data.put("LoginType", "0");\
		data.put("CREDIT", mBdl.getString("CreditStatus"));\
		data.put("InstFlag", mBdl.getString("CreditInsStatus"));\
\
		String checkValue = Helper\
				.sha256("HashKey=" + data.get("HashKey") + "&Amt="\
						+ data.get("Amt") + "&MerchantID="\
						+ data.get("MerchantID") + "&MerchantOrderNo="\
						+ data.get("MerchantOrderNo") + "&TimeStamp="\
						+ data.get("TimeStamp") + "&Version="\
						+ data.get("Version") + "&HashIV=" + data.get("HashIV"))\
				.toUpperCase();\
\
		data.put("CheckValue", checkValue);\
\
		String postData = URLBuilder.httpBuildQuery(data, "UTF-8");\
\
		webView.setWebViewClient(new WebViewClient() \{\
			@Override\
			public boolean shouldOverrideUrlLoading(WebView view, String url) \{\
				return false;\
			\}\
\
			@Override\
			public void onPageFinished(WebView view, String url) \{\
				super.onPageFinished(view, url);\
\
				// str
\f1 \'b6\'f1\'a4\'4a\'a6\'a8\'a5\'5c\'a9\'ce\'a5\'a2\'b1\'d1\'aa\'ba\'ba\'f4\'a7\'7d\'a1\'41\'a7\'50\'c2\'5f\'a5\'e6\'a9\'f6\'b5\'b2\'aa\'47
\f0 \
				String str = "";\
				if (url.contains(str)) \{\
\
				\}\
			\}\
		\});\
\
		webView.postUrl(MPG_URL, EncodingUtils.getBytes(postData, "BASE64"));\
	\}\
\
	private void findViews() \{\
		webView = (WebView) findViewById(R.id.webView);\
	\}\
\
\}\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
2
\f1 \'a1\'42
\f0 sha256 class\
import java.math.BigInteger;\
import java.security.MessageDigest;\
\
public class Helper \{\
\
	public Helper() \{\
	\}\
\
	public static String bytesToHex(byte[] data) \{\
		return String.format("%0" + (data.length * 2) + 'x', new BigInteger(1,\
				data));\
	\}\
\
	public static String sha256(String str) \{\
		MessageDigest sha = null;\
\
		try \{\
			sha = MessageDigest.getInstance("SHA-256");\
			sha.update(str.getBytes());\
		\} catch (Exception e) \{\
			e.printStackTrace();\
			return "";\
		\}\
\
		return bytesToHex(sha.digest());\
\
	\}\
\
\}\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
3
\f1 \'a1\'42
\f0 URLBuilder\
import java.io.UnsupportedEncodingException;\
import java.net.URLEncoder;\
import java.util.ArrayList;\
import java.util.Collection;\
import java.util.List;\
import java.util.Map;\
\
public class URLBuilder \{\
	/**\
	 * Build URL string from Map of params. Nested Map and Collection is also\
	 * supported\
	 * \
	 * @param params\
	 *            Map of params for constructing the URL Query String\
	 * @param encoding\
	 *            encoding type. If not set the "UTF-8" is selected by default\
	 * @return String of type key=value&...key=value\
	 * @throws java.io.UnsupportedEncodingException\
	 *             if encoding isnot supported\
	 */\
	public static String httpBuildQuery(Map<String, Object> params,\
			String encoding) \{\
		if (isEmpty(encoding)) \{\
			encoding = "UTF-8";\
		\}\
		StringBuilder sb = new StringBuilder();\
		for (Map.Entry<String, Object> entry : params.entrySet()) \{\
			if (sb.length() > 0) \{\
				sb.append('&');\
			\}\
\
			String name = entry.getKey();\
			Object value = entry.getValue();\
\
			if (value instanceof Map) \{\
				List<String> baseParam = new ArrayList<String>();\
				baseParam.add(name);\
				String str = buildUrlFromMap(baseParam, (Map) value, encoding);\
				sb.append(str);\
\
			\} else if (value instanceof Collection) \{\
				List<String> baseParam = new ArrayList<String>();\
				baseParam.add(name);\
				String str = buildUrlFromCollection(baseParam,\
						(Collection) value, encoding);\
				sb.append(str);\
\
			\} else \{\
				sb.append(encodeParam(name));\
				sb.append("=");\
				sb.append(encodeParam(value));\
			\}\
\
		\}\
		return sb.toString();\
	\}\
\
	private static String buildUrlFromMap(List<String> baseParam,\
			Map<Object, Object> map, String encoding) \{\
		StringBuilder sb = new StringBuilder();\
		String token;\
\
		// Build string of first level - related with params of provided Map\
		for (Map.Entry<Object, Object> entry : map.entrySet()) \{\
\
			if (sb.length() > 0) \{\
				sb.append('&');\
			\}\
\
			String name = String.valueOf(entry.getKey());\
			Object value = entry.getValue();\
			if (value instanceof Map) \{\
				List<String> baseParam2 = new ArrayList<String>(baseParam);\
				baseParam2.add(name);\
				String str = buildUrlFromMap(baseParam2, (Map) value, encoding);\
				sb.append(str);\
\
			\} else if (value instanceof List) \{\
				List<String> baseParam2 = new ArrayList<String>(baseParam);\
				baseParam2.add(name);\
				String str = buildUrlFromCollection(baseParam2, (List) value,\
						encoding);\
				sb.append(str);\
			\} else \{\
				token = getBaseParamString(baseParam) + "[" + name + "]="\
						+ encodeParam(value);\
				sb.append(token);\
			\}\
		\}\
\
		return sb.toString();\
	\}\
\
	private static String buildUrlFromCollection(List<String> baseParam,\
			Collection coll, String encoding) \{\
		StringBuilder sb = new StringBuilder();\
		String token;\
		if (!(coll instanceof List)) \{\
			coll = new ArrayList(coll);\
		\}\
		List arrColl = (List) coll;\
\
		// Build string of first level - related with params of provided Map\
		for (int i = 0; i < arrColl.size(); i++) \{\
\
			if (sb.length() > 0) \{\
				sb.append('&');\
			\}\
\
			Object value = (Object) arrColl.get(i);\
			if (value instanceof Map) \{\
				List<String> baseParam2 = new ArrayList<String>(baseParam);\
				baseParam2.add(String.valueOf(i));\
				String str = buildUrlFromMap(baseParam2, (Map) value, encoding);\
				sb.append(str);\
\
			\} else if (value instanceof List) \{\
				List<String> baseParam2 = new ArrayList<String>(baseParam);\
				baseParam2.add(String.valueOf(i));\
				String str = buildUrlFromCollection(baseParam2, (List) value,\
						encoding);\
				sb.append(str);\
			\} else \{\
				token = getBaseParamString(baseParam) + "[" + i + "]="\
						+ encodeParam(value);\
				sb.append(token);\
			\}\
		\}\
\
		return sb.toString();\
	\}\
\
	private static String getBaseParamString(List<String> baseParam) \{\
		StringBuilder sb = new StringBuilder();\
		for (int i = 0; i < baseParam.size(); i++) \{\
			String s = baseParam.get(i);\
			if (i == 0) \{\
				sb.append(s);\
			\} else \{\
				sb.append("[" + s + "]");\
			\}\
		\}\
		return sb.toString();\
	\}\
\
	/**\
	 * Check if String is either empty or null\
	 * \
	 * @param str\
	 *            string to check\
	 * @return true if string is empty. Else return false\
	 */\
	public static boolean isEmpty(String str) \{\
		return str == null || str.length() == 0;\
	\}\
\
	private static String encodeParam(Object param) \{\
		try \{\
			return URLEncoder.encode(String.valueOf(param), "UTF-8");\
		\} catch (UnsupportedEncodingException e) \{\
			return URLEncoder.encode(String.valueOf(param));\
		\}\
	\}\
\}}